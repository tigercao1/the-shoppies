{"version":3,"sources":["components/Search-bar/SearchBar.js","components/Result-list/Result-list-item/ResultListItem.js","components/Result-list/Page-bar/PageBar.js","components/Result-list/ResultList.js","resources/properties.js","utils/api.js","controllers/MovieController.js","components/Nominations/Nomination-list-item/ListItem.js","components/Nominations/Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleInput","e","setLoadingState","initSearch","searchByTitle","title","target","value","trim","bind","_","debounce","this","className","type","id","placeholder","autoComplete","onChange","Component","ResultListItem","useState","isNominated","setIsNominated","useEffect","year","disabled","onClick","handleNomination","PageBar","state","currPage","updatePageNum","prevPage","nextPage","prevState","setState","num","parseInt","numOfPages","Array","from","i","ResultList","movies","movieData","isLoading","didFinishNominate","prevProps","movie","isArray","map","properties","axios","create","baseURL","responseType","timeout","MovieController","params","apiKey","query","queryParameter","s","page","api","get","ListItem","onRemove","Nominations","nominations","length","item","App","movieController","setDidFinishNominate","isLoadingState","setMovieData","setNumOfPages","currTitle","setCurrTitle","JSON","parse","localStorage","getItem","setNominations","setCurrPage","showToast","setShowToast","checkNominated","filter","setLocalData","then","data","responseData","Response","imdbID","push","Title","Year","processMovieData","Search","isNaN","totalResults","totalPages","Math","ceil","processPagedData","console","log","Error","catch","err","response","handleError","finally","newNominations","setItem","stringify","prevNominations","tempMovieData","newList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b49e07a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash'\nimport './SearchBar.scss';\n\nclass SearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n        this.searchByTitle = this.searchByTitle.bind(this);\n        this.searchByTitle = _.debounce(this.searchByTitle, 500);\n    }\n\n    searchByTitle(title) {\n        this.props.searchByTitle(title);\n    }\n\n    handleInput = (e) => {\n        this.props.setLoadingState(true);\n        this.props.initSearch();\n        this.searchByTitle({title: e.target.value.trim()});\n    }\n\n    render() {\n        return (\n            <div className=\"search-bar\">\n                <p>Movie Title</p>\n                <input type=\"text\" id=\"search-field\" placeholder=\"Search...\" autoComplete=\"off\" onChange={this.handleInput}></input>\n            </div>\n        )\n    }\n\n}\n\nexport default SearchBar;","import React, { useEffect, useState } from 'react';\nimport './ResultListItem.scss';\n\nconst ResultListItem = (props) => {\n    const [isNominated, setIsNominated] = useState(false);\n\n    useEffect(() => {\n        setIsNominated(props.isNominated);\n    }, [props.isNominated])\n\n    const handleNomination = () => {\n        props.handleNomination({\n            title: props.title,\n            year: props.year,\n            id: props.id,\n        });\n    }\n\n    return (\n        <div className=\"result-list-item\">\n            <div className=\"title\">\n                {props.title} ({props.year})\n            </div>\n            <button disabled={isNominated} onClick={handleNomination}>Nominate</button>\n        </div>\n    )\n}\n\nexport default ResultListItem","import React, { Component } from 'react';\nimport './PageBar.scss';\n\nclass PageBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currPage: this.props.currPage\n        };\n        this.updatePageNum = this.updatePageNum.bind(this);\n        this.prevPage = this.prevPage.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n    }\n\n    componentDidUpdate(prevState) {\n        if (prevState.currPage !== this.props.currPage) {\n            this.setState({\n                currPage: this.props.currPage\n            });\n        }\n    }\n\n    updatePageNum(e) {\n        let num = parseInt(e.target.value)\n        this.props.updatePageNum(num);\n    }\n\n    prevPage() {\n        this.props.updatePageNum(this.state.currPage - 1);\n    }\n\n    nextPage() {\n        this.props.updatePageNum(this.state.currPage + 1);\n    }\n\n    render() {\n        return (\n            <div className=\"page-bar\">\n                <button className=\"page-button\" disabled={this.props.numOfPages === null || this.state.currPage === 1} onClick={this.prevPage}>Prev</button>\n                {this.props.numOfPages ? \n                    <div className=\"page-num\">\n                        <select className=\"page-num-selection\" onChange={this.updatePageNum} value={this.state.currPage}>\n                            {\n                                Array.from(Array(this.props.numOfPages), (e, i) => {\n                                    return <option\n                                        key={i+1}\n                                        value={i+1}\n                                    >{i+1}</option>\n                                })\n                            }\n                        </select>\n                        <span> / {this.props.numOfPages}</span>\n                    </div> :\n                    <div></div>\n                }\n                \n                <button className=\"page-button\" disabled={this.props.numOfPages === null || this.state.currPage === this.props.numOfPages} onClick={this.nextPage}>Next</button>\n            </div>\n        )\n    }\n}\n\nexport default PageBar","import React, { Component } from 'react';\nimport './ResultList.scss';\nimport ResultListItem from './Result-list-item/ResultListItem'\nimport PageBar from './Page-bar/PageBar';\n\nclass ResultList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            movies: this.props.movieData || null,\n            isLoading: this.props.isLoading,\n            didFinishNominate: this.props.didFinishNominate\n        }\n        this.updatePageNum = this.updatePageNum.bind(this);\n        this.handleNomination = this.handleNomination.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        // TODO: Movie data state is updated but the display is not updated.\n        if (prevProps.movieData !== this.props.movieData) {\n            this.setState({movies: this.props.movieData});\n        }\n        if (prevProps.isLoading !== this.props.isLoading) {\n            this.setState({isLoading: this.props.isLoading});\n        }\n        if (prevProps.didFinishNominate !== this.props.didFinishNominate) {\n            this.setState({didFinishNominate: this.props.didFinishNominate})\n        }\n    }\n\n    updatePageNum(num) {\n        this.props.updatePageNum(num);\n        // this.props.setLoadingState(true);\n    }\n\n    handleNomination(movie) {\n        this.props.handleNomination(movie);\n    }\n\n    render() {\n        return (\n            <div className=\"result-list\">\n                <p>Search results</p>\n                {\n                    this.state.isLoading ? <div className=\"placeholder\"><div className=\"loader\"/></div> : \n                        this.state.movies && this.state.movies !== \"Incorrect IMDb ID.\" ? \n                                (Array.isArray(this.state.movies) ? \n                                    <div className=\"list-body\">\n                                        {this.state.movies.map((movie, i) => {\n                                            return <ResultListItem\n                                                key={i}\n                                                title={movie.title}\n                                                year={movie.year}\n                                                id={movie.id}\n                                                isNominated={this.state.didFinishNominate ? true : movie.isNominated}\n                                                handleNomination = {this.handleNomination}\n                                            ></ResultListItem>\n                                        })}\n                                    </div>\n                                : <div className=\"placeholder\">{this.state.movies}</div>)\n                        : <div className=\"placeholder\">Search something</div>\n                            \n\n                }\n                <PageBar \n                    updatePageNum={this.updatePageNum} \n                    numOfPages={this.props.numOfPages}\n                    currPage={this.props.currPage}\n                ></PageBar>\n            </div>\n        )\n    }\n}\n\nexport default ResultList","export const properties = {\n    apikey: \"812bf1e0\",\n    host: \"http://www.omdbapi.com/\"\n}","import axios from 'axios';\nimport { properties } from './../resources/properties';\n\nexport default axios.create({\n    baseURL: properties.host,\n    responseType: \"json\",\n    timeout: 5000\n});","import { properties } from './../resources/properties';\nimport api from './../utils/api';\n\nclass MovieController {\n    constructor() {\n        this.params = {\n            apiKey: properties.apikey\n        };\n        this.searchByTitle = this.searchByTitle.bind(this);\n    }\n\n    async searchByTitle(query) {\n        let queryParameter = {apiKey: this.params.apiKey};\n        if (query.title) {\n            queryParameter.s = query.title;\n            queryParameter.type = \"movie\";\n            if (query.page) {\n                queryParameter.page = query.page\n            }\n        }\n        let movies = await api.get('/', {\n            params: queryParameter\n        });\n        return movies;\n    }\n\n}\n\nexport default MovieController","import React from 'react';\nimport './ListItem.scss';\n\nconst ListItem = (props) => {\n    const onRemove = () => {\n        props.onRemove(props.id);\n    }\n\n    return (\n        <div className=\"result-list-item\">\n            <div className=\"title\">\n                {props.title} ({props.year})\n            </div>\n            <button onClick={onRemove}>Remove</button>\n        </div>\n    )\n}\n\nexport default ListItem","import React, { Component } from 'react';\nimport './Nominations.scss';\nimport ListItem from './Nomination-list-item/ListItem'\n\nclass Nominations extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            nominations: this.props.nominations || []\n        }\n\n    }\n\n    componentDidUpdate(prevState) {\n        if (prevState.nominations.length !== this.props.nominations.length) {\n            this.setState({\n                nominations: this.props.nominations\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"nominations\">\n                <div className=\"title\">\n                    <p className=\"text\">Nominations</p>\n                    <p className=\"nomination-count\">{this.state.nominations.length}/5</p>\n                </div>\n                {\n                    this.state.nominations.length > 0 ?\n                    this.state.nominations.map((item, i) => {\n                        return (<ListItem\n                            key={i}\n                            title={item.title}\n                            year={item.year}\n                            id={item.id}\n                            onRemove={this.props.onRemove}\n                        ></ListItem>)\n                    }) :\n                    <div className=\"placeholder\">Nominate your favorite movies</div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Nominations","import React, { useEffect, useState } from 'react'\nimport './App.scss';\nimport SearchBar from './components/Search-bar/SearchBar';\nimport ResultList from './components/Result-list/ResultList';\nimport MovieController from './controllers/MovieController';\nimport Nominations from './components/Nominations/Nominations';\n\nfunction App() {\n    const movieController = new MovieController();\n\n    const MAX_NOMINATIONS = 5\n\n    const [didFinishNominate, setDidFinishNominate] = useState(false);\n\n    const retrieveLocalData = () => {\n        let nominations = JSON.parse(localStorage.getItem('nominations')) || [];\n        if (nominations.length >= MAX_NOMINATIONS) {\n            setDidFinishNominate(true);\n        }\n        return nominations;\n    }\n\n    const [isLoadingState, setLoadingState] = useState(false);\n    const [movieData, setMovieData] = useState(null);\n    const [numOfPages, setNumOfPages] = useState(null);\n    const [currTitle, setCurrTitle] = useState(\"\");\n    const [nominations, setNominations] = useState(retrieveLocalData);\n    const [currPage, setCurrPage] = useState(1);\n    const [showToast, setShowToast] = useState(false);\n\n    //TODO: Save to local on unmount or save to local on nomination\n\n    const checkNominated = (id) => {\n        return nominations.filter(e => e.id === id).length > 0\n    }\n\n    useEffect(() => {\n        if (nominations.length >= MAX_NOMINATIONS) {\n            setDidFinishNominate(true);\n            setShowToast(true);\n        } else {\n            setShowToast(false);\n            setDidFinishNominate(false);\n        }\n        setLocalData(nominations);\n    }, [nominations])\n\n    const setLoading = (state) => {\n        setLoadingState(state);\n    }\n\n    const processPagedData = (data) => {\n        if (data && !isNaN(data)) {\n            let totalResults = parseInt(data);\n            let totalPages = Math.ceil(totalResults/10);\n            setNumOfPages(totalPages);\n        }\n    }\n\n    const processMovieData = (data) => {\n        let movies = [];\n        if (data) {\n            for (let movie of data) {\n                let isNominated = checkNominated(movie.imdbID);\n                movies.push({\n                    title: movie.Title,\n                    year: movie.Year,\n                    id: movie.imdbID,\n                    isNominated: isNominated\n                });\n            }\n        }\n        return movies;\n    }\n\n    const initSearch = () => {\n        setNumOfPages(null);\n        setMovieData(null);\n        setCurrPage(1);\n    }\n\n    const searchByTitle = (query) => {\n        if (query) {\n            setCurrTitle(query.title);\n            movieController.searchByTitle(query).then((movies) => {\n                if (movies.data) {\n                        let responseData = movies.data;\n                        if (responseData.Response === \"True\") {\n                            setMovieData(processMovieData(responseData.Search));\n                            processPagedData(responseData.totalResults);\n                        } else {\n                            console.log(responseData.Error);\n                            setMovieData(responseData.Error);\n                        }\n                }\n            }).catch((err) => {\n                if (err.response) {\n                    handleError(err.response.data);\n                }\n            }).finally(() => {\n                setLoadingState(false);\n            });\n        } else {\n            setMovieData(null);\n            setLoadingState(false);\n        }\n    }\n\n    const handleError = (err) => {\n            // TODO: Modal error\n            console.log(err);\n    }\n\n    const updatePageNum = (num) => {\n        let query = {\n            title: currTitle,\n            page: num\n        }\n        setCurrPage(num);\n        searchByTitle(query)\n    }\n\n    const setLocalData = (newNominations) => {\n        localStorage.setItem(\"nominations\", JSON.stringify(newNominations))\n    }\n\n    const updateNominations = (movie) => {\n        if (nominations.length < MAX_NOMINATIONS) {\n            setNominations((prevNominations) => {\n                return [...prevNominations, movie];\n            })\n            let tempMovieData = [...movieData];\n            for (let i in tempMovieData) {\n                if (tempMovieData[i].id === movie.id) {\n                    tempMovieData[i].isNominated = true;\n                }\n            }\n            setMovieData(tempMovieData);\n        }\n    }\n\n    const onRemove = (id) => {\n        let newList = nominations.filter((item) => item.id !== id);\n        setNominations(newList)\n        if (Array.isArray(movieData)) {\n            let tempMovieData = [...movieData];\n            for (let i in tempMovieData) {\n                if (tempMovieData[i].id === id) {\n                    tempMovieData[i].isNominated = false;\n                }\n            }\n            setMovieData(tempMovieData);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"title-bar\">\n                The Shoppies\n            </div>\n            <SearchBar searchByTitle={searchByTitle} setLoadingState={setLoading} initSearch={initSearch}></SearchBar>\n            <div className=\"app-body\">\n                <ResultList \n                    movieData={movieData} \n                    isLoading={isLoadingState} \n                    numOfPages={numOfPages}\n                    updatePageNum={updatePageNum}\n                    handleNomination={updateNominations}\n                    didFinishNominate={didFinishNominate}\n                    currPage={currPage}\n                ></ResultList>\n                <Nominations \n                    nominations={nominations}\n                    onRemove={onRemove}\n                ></Nominations>\n            </div>\n            {showToast ? <div className=\"snackbar\">You had finished nominating your favorite movies!</div> : \"\"}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}